# main workflow for deploying Terraform on Azure

name: 'Terraform Deploy'

on:
  # allow manual trigger in case we need it
  workflow_dispatch:
  push:
    branches:
      - dev[0-9]
      - test
      - prod

# environment varilables and their default values to catch errors
env:
  TF_LOG: INFO
  REGION: westus3
  BRANCH: bbb
  PREFIX: pp     # prefix for resource groups and tags

jobs:

  terraform-deploy:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest

  # use bash shell all the time
    defaults:
      run:
        shell: bash
        working-directory: ./main
    
    steps:
    
    # checkout the repo
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Set env.BRANCH' 
      run: echo "BRANCH=$(echo $GITHUB_REF | cut -d'/' -f 3)" >> $GITHUB_ENV

    - name: 'Set env.PREFIX with first two letters of github repo owner name'
      run: echo "PREFIX=$(echo $GITHUB_REPOSITORY_OWNER | cut -d'/' -f 1 | cut -c 1-2)" >> $GITHUB_ENV

    # setup Terraform
    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ">=1.6.0"

    - name: 'Terraform version check'
      run: terraform --version

    # initialize Terraform
    - name: 'Terraform Init'
      id: init
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        TFSTATE_RESOURCE_GROUP: ${{ secrets.TFSTATE_RESOURCE_GROUP }}
        TFSTATE_STORAGE_ACCOUNT: ${{ secrets.TFSTATE_STORAGE_ACCOUNT }}
        TFSTATE_CONTAINER_NAME: ${{ secrets.TFSTATE_CONTAINER_NAME }}
      run: terraform init -backend-config="storage_account_name=$TFSTATE_STORAGE_ACCOUNT" -backend-config="container_name=$TFSTATE_CONTAINER_NAME" -backend-config="resource_group_name=$TFSTATE_RESOURCE_GROUP" -backend-config="key=$PREFIX-$BRANCH.terraform.tfstate" -no-color

    # validate Terraform configuration files
    - name: 'Terraform Validate'
      if: github.event_name != 'delete'
      id: validate
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform validate -no-color

    # refresh Terraform state
    # - name: 'Terraform refresh'
    #   if: github.event_name != 'delete'
    #   id: refresh
    #   env:
    #     ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    #     ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    #     ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    #   run: terraform refresh -no-color -var="BRANCH=${{ env.BRANCH }}" -var="PREFIX=${{ env.PREFIX }}"

    # plan Terraform configuration files
    - name: 'Terraform Plan'
      if: github.event_name != 'delete'
      id: plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform plan -no-color -var="BRANCH=${{ env.BRANCH }}" -var="PREFIX=${{ env.PREFIX }}"

    # apply Terraform configuration files
    - name: 'Terraform Apply'
      if: github.event_name != 'delete'
      id: apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform apply -auto-approve -no-color -var="BRANCH=${{ env.BRANCH }}" -var="PREFIX=${{ env.PREFIX }}"